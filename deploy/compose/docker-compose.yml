version: '3.8'

services:
  # Search backends
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: searchit-opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - compatibility.override_main_response_version=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9600:9600"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - searchit

  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: searchit-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - searchit

  # Datastores
  postgres:
    image: postgres:15-alpine
    container_name: searchit-postgres
    environment:
      POSTGRES_DB: searchit
      POSTGRES_USER: searchit
      POSTGRES_PASSWORD: searchit
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U searchit -d searchit"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - searchit

  minio:
    image: minio/minio:RELEASE.2023-12-23T07-19-11Z
    container_name: searchit-minio
    environment:
      MINIO_ACCESS_KEY: searchit
      MINIO_SECRET_KEY: searchitsecret
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - searchit

  # MinIO bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: searchit-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 searchit searchitsecret;
      mc mb minio/searchit-data --ignore-existing;
      mc policy set public minio/searchit-data;
      exit 0;
      "
    networks:
      - searchit

  # Analytics
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: searchit-redpanda
    ports:
      - "9092:9092"
      - "9644:9644"
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    command:
      - redpanda
      - start
      - --kafka-addr
      - internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr
      - internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr
      - internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr
      - internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr
      - internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr
      - redpanda:33145
      - --advertise-rpc-addr
      - redpanda:33145
      - --smp
      - '1'
      - --memory
      - 1G
      - --mode
      - dev-container
      - --default-log-level=info
    healthcheck:
      test: ["CMD", "rpk", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - searchit

  # Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: searchit-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - searchit

  grafana:
    image: grafana/grafana:latest
    container_name: searchit-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - searchit

  # Application services
  gateway:
    build:
      context: ../../services/gateway
      dockerfile: ../../deploy/docker/gateway.Dockerfile
    container_name: searchit-gateway
    ports:
      - "8000:8000"
    environment:
      - OPENSEARCH_URL=http://opensearch:9200
      - QDRANT_URL=http://qdrant:6333
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=searchit
      - POSTGRES_USER=searchit
      - POSTGRES_PASSWORD=searchit
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=searchit
      - MINIO_SECRET_KEY=searchitsecret
      - MINIO_BUCKET=searchit-data
      - KAFKA_BROKER=redpanda:9092
      - GATEWAY_PORT=8000
      - ENV=dev
    depends_on:
      opensearch:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - searchit

  indexer:
    build:
      context: ../../services/indexer
      dockerfile: ../../deploy/docker/indexer.Dockerfile
    container_name: searchit-indexer
    environment:
      - OPENSEARCH_URL=http://opensearch:9200
      - QDRANT_URL=http://qdrant:6333
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=searchit
      - POSTGRES_USER=searchit
      - POSTGRES_PASSWORD=searchit
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=searchit
      - MINIO_SECRET_KEY=searchitsecret
      - MINIO_BUCKET=searchit-data
    depends_on:
      opensearch:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    networks:
      - searchit

  web:
    build:
      context: ../../web
      dockerfile: ../../deploy/docker/web.Dockerfile
    container_name: searchit-web
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_GATEWAY_URL=http://localhost:8000
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - searchit

volumes:
  qdrant_data:
  postgres_data:
  minio_data:
  redpanda_data:
  prometheus_data:
  grafana_data:

networks:
  searchit:
    driver: bridge
